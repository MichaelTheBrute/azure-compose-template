name: Azure Cleanup

on:
  workflow_dispatch:
    inputs:
      cleanup_scope:
        description: 'What to clean up'
        required: true
        default: 'resources-only'
        type: choice
        options:
        - 'resources-only'
        - 'complete-cleanup'
      confirmation:
        description: 'Type "DELETE" to confirm cleanup'
        required: true
        type: string
    # Restrict to specific branches
    branches:
      - main
      - staging
      - prod

jobs:
  cleanup:
    runs-on: ubuntu-latest
    # Add a safeguard to ensure we're only running on allowed branches
    if: github.ref_name == 'main' || github.ref_name == 'staging' || github.ref_name == 'prod'

    steps:
      - name: Validate Confirmation
        run: |
          if [[ "${{ github.event.inputs.confirmation }}" != "DELETE" ]]; then
            echo "::error::‚ùå Cleanup cancelled - confirmation not provided"
            echo "::error::You must type 'DELETE' in the confirmation field to proceed"
            exit 1
          fi
          echo "‚úÖ Cleanup confirmation validated"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Load App Name from docker-compose.yml
        id: load-app-name
        run: |
          # Load app name and handle various empty/null cases
          RAW_APP_NAME=$(yq '.metadata.app_name // ""' docker-compose.yml)
          
          # Clean up the value (remove quotes, trim whitespace)
          APP_NAME=$(echo "$RAW_APP_NAME" | sed 's/^["'"'"']//;s/["'"'"']$//' | xargs)
          
          # Convert to lowercase for Azure resource naming
          APP_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]')
          
          echo "Processed app_name: '$APP_NAME'"
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Validate App Name
        run: |
          APP_NAME="${{ steps.load-app-name.outputs.app_name }}"
          
          # Check if app_name is null, empty, or template placeholder
          if [[ -z "$APP_NAME" || "$APP_NAME" == "null" || "$APP_NAME" == '""' || "$APP_NAME" == "''" || "$APP_NAME" == "your-app-name-here" ]]; then
            echo "::error::‚ùå App name is not configured in docker-compose.yml"
            echo "::error::Cannot determine which resources to clean up"
            exit 1
          fi
          
          # Validate format (allow hyphens as per init script requirements)
          if [[ ! "$APP_NAME" =~ ^[a-z0-9][a-z0-9-]*[a-z0-9]$ ]] || [[ ${#APP_NAME} -lt 2 ]] || [[ ${#APP_NAME} -gt 50 ]]; then
            echo "::error::‚ùå Invalid app name format: '$APP_NAME'"
            exit 1
          fi
          
          echo "‚úÖ APP_NAME '$APP_NAME' is valid."

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Generate Resource Names
        id: generate-names
        run: |
          # Use the current branch name directly
          BRANCH_NAME="${{ github.ref_name }}"
          APP_NAME="${{ steps.load-app-name.outputs.app_name }}"
          
          # Generate resource names (matching the deploy workflow)
          RESOURCE_GROUP="${APP_NAME}-${BRANCH_NAME}-rg"
          SERVICE_PRINCIPAL_NAME="sp-${APP_NAME}-github-actions"
          
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "service_principal_name=$SERVICE_PRINCIPAL_NAME" >> $GITHUB_OUTPUT
          
          echo "üìã Resources to clean up:"
          echo "   ‚Ä¢ Resource Group: $RESOURCE_GROUP"
          echo "   ‚Ä¢ Service Principal: $SERVICE_PRINCIPAL_NAME (if complete cleanup selected)"
          echo "   ‚Ä¢ Branch: $BRANCH_NAME"
          echo "   ‚Ä¢ Cleanup Scope: ${{ github.event.inputs.cleanup_scope }}"

      - name: Check Resource Group Existence
        id: check-rg
        run: |
          RESOURCE_GROUP="${{ steps.generate-names.outputs.resource_group }}"
          
          if az group show --name "$RESOURCE_GROUP" >/dev/null 2>&1; then
            echo "rg_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Resource group '$RESOURCE_GROUP' exists and will be deleted"
            
            # List resources in the group
            echo "üì¶ Resources in group:"
            az resource list --resource-group "$RESOURCE_GROUP" --query "[].{Name:name, Type:type}" -o table || echo "   (Unable to list resources)"
          else
            echo "rg_exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  Resource group '$RESOURCE_GROUP' does not exist (already deleted or never created)"
          fi

      - name: Check Service Principal Existence
        id: check-sp
        run: |
          SP_NAME="${{ steps.generate-names.outputs.service_principal_name }}"
          
          SP_ID=$(az ad sp list --display-name "$SP_NAME" --query "[0].appId" -o tsv 2>/dev/null || echo "")
          
          if [[ -n "$SP_ID" && "$SP_ID" != "null" ]]; then
            echo "sp_exists=true" >> $GITHUB_OUTPUT
            echo "sp_id=$SP_ID" >> $GITHUB_OUTPUT
            echo "‚úÖ Service principal '$SP_NAME' exists (ID: $SP_ID)"
            
            if [[ "${{ github.event.inputs.cleanup_scope }}" == "complete-cleanup" ]]; then
              echo "üóëÔ∏è  Service principal will be deleted"
            else
              echo "‚ö†Ô∏è  Service principal will be kept (resources-only cleanup)"
            fi
          else
            echo "sp_exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  Service principal '$SP_NAME' does not exist (already deleted or never created)"
          fi

      - name: Delete Resource Group
        if: steps.check-rg.outputs.rg_exists == 'true'
        run: |
          RESOURCE_GROUP="${{ steps.generate-names.outputs.resource_group }}"
          
          echo "üóëÔ∏è  Deleting Resource Group: $RESOURCE_GROUP"
          echo "‚è≥ This operation will run in the background and may take several minutes..."
          
          # Delete resource group (no-wait for faster workflow completion)
          az group delete --name "$RESOURCE_GROUP" --yes --no-wait
          
          echo "‚úÖ Resource group deletion initiated"
          echo "üí° You can monitor progress with: az group show --name $RESOURCE_GROUP"

      - name: Delete Service Principal
        if: steps.check-sp.outputs.sp_exists == 'true' && github.event.inputs.cleanup_scope == 'complete-cleanup'
        run: |
          SP_NAME="${{ steps.generate-names.outputs.service_principal_name }}"
          SP_ID="${{ steps.check-sp.outputs.sp_id }}"
          
          echo "üóëÔ∏è  Deleting Service Principal: $SP_NAME (ID: $SP_ID)"
          
          # Delete service principal
          if az ad sp delete --id "$SP_ID"; then
            echo "‚úÖ Service principal deleted successfully"
          else
            echo "‚ö†Ô∏è  Failed to delete service principal (it may already be deleted)"
            exit 0  # Don't fail the workflow for this
          fi

      - name: Cleanup GitHub Secrets (Complete Cleanup Only)
        if: github.event.inputs.cleanup_scope == 'complete-cleanup'
        run: |
          echo "üóëÔ∏è  Removing GitHub repository secrets..."
          
          # Note: We can't actually delete secrets via GitHub CLI in actions
          # But we can provide instructions
          echo "‚ö†Ô∏è  Manual action required:"
          echo "   The following GitHub secrets should be manually removed if no longer needed:"
          echo "   ‚Ä¢ AZURE_CREDENTIALS"
          echo "   ‚Ä¢ Any other Azure-related secrets"
          echo ""
          echo "   Go to: Settings ‚Üí Secrets and variables ‚Üí Actions"

      - name: Cleanup Summary
        run: |
          echo "üßπ Cleanup Summary"
          echo "=================="
          echo ""
          echo "‚úÖ Completed Actions:"
          
          if [[ "${{ steps.check-rg.outputs.rg_exists }}" == "true" ]]; then
            echo "   ‚Ä¢ Resource group deletion initiated: ${{ steps.generate-names.outputs.resource_group }}"
          else
            echo "   ‚Ä¢ Resource group: Not found (already deleted)"
          fi
          
          if [[ "${{ github.event.inputs.cleanup_scope }}" == "complete-cleanup" ]]; then
            if [[ "${{ steps.check-sp.outputs.sp_exists }}" == "true" ]]; then
              echo "   ‚Ä¢ Service principal deleted: ${{ steps.generate-names.outputs.service_principal_name }}"
            else
              echo "   ‚Ä¢ Service principal: Not found (already deleted)"
            fi
            echo "   ‚Ä¢ GitHub secrets: Manual removal required"
          else
            echo "   ‚Ä¢ Service principal: Preserved (resources-only cleanup)"
            echo "   ‚Ä¢ GitHub secrets: Preserved"
          fi
          
          echo ""
          echo "üìã Next Steps:"
          if [[ "${{ github.event.inputs.cleanup_scope }}" == "resources-only" ]]; then
            echo "   ‚Ä¢ Resources cleaned up, but deployment infrastructure preserved"
            echo "   ‚Ä¢ You can still deploy to this environment"
            echo "   ‚Ä¢ Run 'complete-cleanup' to remove service principal and secrets"
          else
            echo "   ‚Ä¢ Complete cleanup performed"
            echo "   ‚Ä¢ Run ./init-repo-azure.sh to reinitialize if needed"
            echo "   ‚Ä¢ Manually remove GitHub secrets from repository settings"
          fi
          
          echo ""
          echo "üîç Verification Commands:"
          echo "   ‚Ä¢ Check resource group: az group show --name ${{ steps.generate-names.outputs.resource_group }}"
          if [[ "${{ github.event.inputs.cleanup_scope }}" == "complete-cleanup" ]]; then
            echo "   ‚Ä¢ Check service principal: az ad sp show --id ${{ steps.check-sp.outputs.sp_id }}"
          fi