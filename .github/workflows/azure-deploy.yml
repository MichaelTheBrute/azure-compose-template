name: Azure Container Apps CI/CD

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Load App Name from docker-compose.yml
        id: load-app-name
        run: |
          APP_NAME=$(yq '.metadata.app_name' docker-compose.yml)
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Display deployment info
        run: |
          APP_NAME_NOHYPHEN=$(echo "${{ env.APP_NAME }}" | tr -d '-')
          REF_NAME_NOHYPHEN=$(echo "${{ github.ref_name }}" | tr -d '-')
          RESOURCE_GROUP="${APP_NAME_NOHYPHEN}-${REF_NAME_NOHYPHEN}-resource-group"
          ACR_NAME="${APP_NAME_NOHYPHEN}${REF_NAME_NOHYPHEN}acr"
          AZURE_ENV_NAME="${APP_NAME_NOHYPHEN}-${REF_NAME_NOHYPHEN}-env"
          echo "Deploying to environment: ${{ github.ref_name }}"
          echo "Resource Group: $RESOURCE_GROUP"
          echo "ACR: $ACR_NAME"
          echo "Azure Environment Name: $AZURE_ENV_NAME"

      - name: Create Resource Group if not exists
        run: |
          APP_NAME_NOHYPHEN=$(echo "${{ env.APP_NAME }}" | tr -d '-')
          REF_NAME_NOHYPHEN=$(echo "${{ github.ref_name }}" | tr -d '-')
          RESOURCE_GROUP="${APP_NAME_NOHYPHEN}-${REF_NAME_NOHYPHEN}-resource-group"
          if ! az group show --name $RESOURCE_GROUP &>/dev/null; then
            echo "Creating resource group $RESOURCE_GROUP..."
            az group create --name $RESOURCE_GROUP --location westus
          else
            echo "Resource group $RESOURCE_GROUP already exists."
          fi

      - name: Create ACR if not exists
        run: |
          APP_NAME_NOHYPHEN=$(echo "${{ env.APP_NAME }}" | tr -d '-')
          REF_NAME_NOHYPHEN=$(echo "${{ github.ref_name }}" | tr -d '-')
          RESOURCE_GROUP="${APP_NAME_NOHYPHEN}-${REF_NAME_NOHYPHEN}-resource-group"
          ACR_NAME="${APP_NAME_NOHYPHEN}${REF_NAME_NOHYPHEN}acr"
          if ! az acr show --name $ACR_NAME --resource-group $RESOURCE_GROUP &>/dev/null; then
            echo "Creating container registry $ACR_NAME..."
            az acr create --resource-group $RESOURCE_GROUP --name $ACR_NAME --sku Basic --admin-enabled true
          else
            echo "Container registry $ACR_NAME already exists."
          fi

      - name: Create Container Apps Environment if not exists
        run: |
          RESOURCE_GROUP="${{ env.APP_NAME }}-${{ github.ref_name }}-resource-group"
          AZURE_ENV_NAME="${{ env.APP_NAME }}-${{ github.ref_name }}-env"
          if ! az containerapp env show --name $AZURE_ENV_NAME --resource-group $RESOURCE_GROUP &>/dev/null; then
            echo "Creating container apps environment $AZURE_ENV_NAME..."
            az containerapp env create \
              --name $AZURE_ENV_NAME \
              --resource-group $RESOURCE_GROUP \
              --location westus
          else
            echo "Container apps environment $AZURE_ENV_NAME already exists."
          fi

      - name: Get ACR credentials
        id: get-acr-creds
        run: |
          APP_NAME_NOHYPHEN=$(echo "${{ env.APP_NAME }}" | tr -d '-')
          REF_NAME_NOHYPHEN=$(echo "${{ github.ref_name }}" | tr -d '-')
          RESOURCE_GROUP="${APP_NAME_NOHYPHEN}-${REF_NAME_NOHYPHEN}-resource-group"
          ACR_NAME="${APP_NAME_NOHYPHEN}${REF_NAME_NOHYPHEN}acr"
          ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query username --output tsv)
          ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" --output tsv)
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
          echo "::add-mask::$ACR_PASSWORD"

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.APP_NAME }}${{ github.ref_name }}acr.azurecr.io
          username: ${{ steps.get-acr-creds.outputs.username }}
          password: ${{ steps.get-acr-creds.outputs.password }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.APP_NAME }}${{ github.ref_name }}acr.azurecr.io/frontend:latest,${{ env.APP_NAME }}${{ github.ref_name }}acr.azurecr.io/frontend:${{ github.sha }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.APP_NAME }}${{ github.ref_name }}acr.azurecr.io/backend:latest,${{ env.APP_NAME }}${{ github.ref_name }}acr.azurecr.io/backend:${{ github.sha }}

      - name: Deploy to Azure Container Apps
        run: |
          RESOURCE_GROUP="${{ env.APP_NAME }}-${{ github.ref_name }}-resource-group"
          AZURE_ENV_NAME="${{ env.APP_NAME }}-${{ github.ref_name }}-env"
          APP_NAME_NOHYPHEN=$(echo "${{ env.APP_NAME }}" | tr -d '-')
          REF_NAME_NOHYPHEN=$(echo "${{ github.ref_name }}" | tr -d '-')
          ACR_NAME="${APP_NAME_NOHYPHEN}${REF_NAME_NOHYPHEN}acr"
          # Deploy using docker-compose
          az containerapp compose create \
            --resource-group $RESOURCE_GROUP \
            --environment $AZURE_ENV_NAME \
            --compose-file-path docker-compose.yml \
            --registry-server $ACR_NAME.azurecr.io \
            --registry-username ${{ steps.get-acr-creds.outputs.username }} \
            --registry-password "${{ steps.get-acr-creds.outputs.password }}"
          
          # Configure frontend
          az containerapp update --name frontend --resource-group $RESOURCE_GROUP \
            --min-replicas 1 --max-replicas 10 \
            --image $ACR_NAME.azurecr.io/frontend:${{ github.sha }} \
            --set-env-vars DEPLOY_TIMESTAMP=$(date +%s)
          
          # Configure backend
          az containerapp update --name backend --resource-group $RESOURCE_GROUP \
            --image $ACR_NAME.azurecr.io/backend:${{ github.sha }} \
            --set-env-vars DEPLOY_TIMESTAMP=$(date +%s)
          
          # Configure backend ingress (if needed)
          az containerapp ingress update --name backend --resource-group $RESOURCE_GROUP \
            --type internal --target-port 5000
          
          # Configure redis ingress (if needed)
          az containerapp ingress update --name redis --resource-group $RESOURCE_GROUP \
            --type internal --target-port 6379 --transport tcp