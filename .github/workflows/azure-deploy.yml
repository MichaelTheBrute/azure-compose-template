name: Azure Container Apps CI/CD

on:
  push:
    branches: [ main, staging, prod ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Load App Name from docker-compose.yml
        id: load-app-name
        run: |
          APP_NAME=$(yq '.metadata.app_name' docker-compose.yml | tr '[:upper:]' '[:lower:]') # Convert to lowercase
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Validate App Name
        run: |
          APP_NAME="${{ steps.load-app-name.outputs.app_name }}"
          if [[ ! "$APP_NAME" =~ ^[a-z0-9]+$ ]]; then
            echo "Error: APP_NAME '$APP_NAME' must be lowercase and contain only alphanumeric characters."
            exit 1
          fi
          echo "APP_NAME '$APP_NAME' is valid."

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Display deployment info
        id: display-info
        run: |
          REF_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr -d '-') # Convert to lowercase and remove hyphens
          RESOURCE_GROUP="${{ steps.load-app-name.outputs.app_name }}-${REF_NAME}-rg"
          ACR_NAME="${{ steps.load-app-name.outputs.app_name }}${REF_NAME}acr"
          AZURE_ENV_NAME="${{ steps.load-app-name.outputs.app_name }}-${REF_NAME}-env"
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "azure_env_name=$AZURE_ENV_NAME" >> $GITHUB_OUTPUT

      - name: Check ACR Name Availability
        run: |
          ACR_NAME="${{ steps.display-info.outputs.acr_name }}"
          RESOURCE_GROUP="${{ steps.display-info.outputs.resource_group }}"
          echo "Checking if ACR '$ACR_NAME' exists in resource group '$RESOURCE_GROUP'..."
          
          # Check if the ACR exists in the resource group
          if az acr show --name $ACR_NAME --resource-group $RESOURCE_GROUP &>/dev/null; then
            echo "ACR '$ACR_NAME' already exists in resource group '$RESOURCE_GROUP'."
          else
            echo "ACR '$ACR_NAME' does not exist in resource group '$RESOURCE_GROUP'. Checking global availability..."
            
            # Check if the ACR name is globally available
            RESULT=$(az acr check-name --name $ACR_NAME --query "nameAvailable" --output tsv)
            if [[ "$RESULT" != "true" ]]; then
              echo "Error: ACR name '$ACR_NAME' is already in use globally and not owned by your subscription."
              exit 1
            fi
            echo "ACR name '$ACR_NAME' is globally available."
          fi

      - name: Wait for Resource Group deletion (if in progress)
        run: |
          RG="${{ steps.display-info.outputs.resource_group }}"
          while true; do
            STATUS=$(az group show --name "$RG" --query "properties.provisioningState" -o tsv 2>/dev/null || echo "Deleted")
            if [[ "$STATUS" == "Deleting" ]]; then
              echo "Resource group $RG is currently being deleted. Waiting 30 seconds..."
              sleep 30
            else
              echo "Resource group $RG is not being deleted (status: $STATUS). Proceeding."
              break
            fi
          done

      - name: Create Resource Group if not exists
        run: |
          if ! az group show --name ${{ steps.display-info.outputs.resource_group }} &>/dev/null; then
            echo "Creating resource group ${{ steps.display-info.outputs.resource_group }}..."
            az group create --name ${{ steps.display-info.outputs.resource_group }} --location westus
          else
            echo "Resource group ${{ steps.display-info.outputs.resource_group }} already exists."
          fi

      - name: Create Key Vault
        id: keyvault
        run: |
          KV_NAME="$(echo "${{ steps.load-app-name.outputs.app_name }}${{ github.ref_name }}" | tr -d '-' | cut -c1-23)"
          RG="${{ steps.display-info.outputs.resource_group }}"
          DB_USER="dbadmin"
          DB_PASS="${{ steps.postgres-setup.outputs.db_password }}"
          # Check if Key Vault exists
          if az keyvault show --name "$KV_NAME" --resource-group "$RG" &>/dev/null; then
            echo "Key Vault $KV_NAME already exists in resource group $RG."
          else
            echo "Creating Key Vault $KV_NAME in resource group $RG..."
            az keyvault create --name "$KV_NAME" --resource-group "$RG" --location westus
          fi
          echo "keyvault_name=$KV_NAME" >> $GITHUB_OUTPUT

      # - name: Assign Key Vault Secrets User role and wait for RBAC propagation
      #   run: |
      #     KV_NAME="${{ steps.keyvault.outputs.keyvault_name }}"
      #     RG="${{ steps.display-info.outputs.resource_group }}"
      #     SUBSCRIPTION_ID=$(az account show --query id -o tsv)
      #     SP_APP_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)
      #     az role assignment create \
      #       --assignee "$SP_APP_ID" \
      #       --role "Key Vault Secrets User" \
      #       --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG/providers/Microsoft.KeyVault/vaults/$KV_NAME" || \
      #     echo "Role assignment may already exist or propagation delay; continuing."

      #     echo "Waiting for Key Vault RBAC propagation for up to 5 minutes..."
      #     for i in {1..10}; do
      #       if az keyvault secret set --vault-name "$KV_NAME" --name "rbac-test-secret" --value "ok" &>/dev/null && \
      #          az keyvault secret show --vault-name "$KV_NAME" --name "rbac-test-secret" &>/dev/null; then
      #         echo "Key Vault RBAC permissions are active."
      #         az keyvault secret delete --vault-name "$KV_NAME" --name "rbac-test-secret" --yes &>/dev/null || true
      #         break
      #       else
      #         echo "RBAC not yet active, waiting 30 seconds..."
      #         sleep 30
      #       fi
      #       if [[ $i -eq 10 ]]; then
      #         echo "::error::Timed out waiting for Key Vault RBAC propagation."
      #         exit 1
      #       fi
      #     done

      - name: Create ACR if not exists
        run: |
          if ! az acr show --name ${{ steps.display-info.outputs.acr_name }} --resource-group ${{ steps.display-info.outputs.resource_group }} &>/dev/null; then
            echo "Creating container registry ${{ steps.display-info.outputs.acr_name }}..."
            az acr create --resource-group ${{ steps.display-info.outputs.resource_group }} --name ${{ steps.display-info.outputs.acr_name }} --sku Basic --admin-enabled true
          else
            echo "Container registry ${{ steps.display-info.outputs.acr_name }} already exists."
          fi

      - name: Create Container Apps Environment if not exists
        run: |
          if ! az containerapp env show --name ${{ steps.display-info.outputs.azure_env_name }} --resource-group ${{ steps.display-info.outputs.resource_group }} &>/dev/null; then
            echo "Creating container apps environment ${{ steps.display-info.outputs.azure_env_name }}..."
            az containerapp env create \
              --name ${{ steps.display-info.outputs.azure_env_name }} \
              --resource-group ${{ steps.display-info.outputs.resource_group }} \
              --location westus
          else
            echo "Container apps environment ${{ steps.display-info.outputs.azure_env_name }} already exists."
          fi

      - name: Create Azure Database for PostgreSQL
        id: postgres-setup
        run: |
          REF_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr -d '-')
          DB_SERVER_NAME="${{ steps.load-app-name.outputs.app_name }}-${REF_NAME}-db"
          DB_USERNAME="dbadmin"
          
          # Check if database server exists
          if ! az postgres flexible-server show --name $DB_SERVER_NAME --resource-group ${{ steps.display-info.outputs.resource_group }} &>/dev/null; then
            echo "Creating PostgreSQL flexible server: $DB_SERVER_NAME"
            
            # Generate secure password
            DB_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
            echo "::add-mask::$DB_PASSWORD"
            
            # Create the server with enhanced configuration
            az postgres flexible-server create \
              --name $DB_SERVER_NAME \
              --resource-group ${{ steps.display-info.outputs.resource_group }} \
              --location westus \
              --admin-user $DB_USERNAME \
              --admin-password "$DB_PASSWORD" \
              --sku-name Standard_B1ms \
              --tier Burstable \
              --storage-size 32 \
              --storage-auto-grow Enabled \
              --version 14 \
              --public-access 0.0.0.0 \
              --high-availability Disabled \
              --backup-retention 7 \
              --geo-redundant-backup Disabled
            
            # Store password for this session
            echo "db_password=$DB_PASSWORD" >> $GITHUB_ENV
            echo "::add-mask::$DB_PASSWORD"

            # Store DB credentials in Key Vault
            KV_NAME="${{ steps.keyvault.outputs.keyvault_name }}"
            echo "Storing DB credentials in Key Vault: $KV_NAME"
            az keyvault secret set --vault-name "$KV_NAME" --name "db-username" --value "$DB_USERNAME"
            az keyvault secret set --vault-name "$KV_NAME" --name "db-password-${{ github.ref_name }}" --value "$DB_PASSWORD" 
            
            echo "PostgreSQL server $DB_SERVER_NAME created successfully"
          else
            echo "PostgreSQL server $DB_SERVER_NAME already exists"
            # Retrieve password from Key Vault for existing server
            KV_NAME="${{ steps.keyvault.outputs.keyvault_name }}"
            RG="${{ steps.display-info.outputs.resource_group }}"
            DB_USER="dbadmin"
            DB_PASS=$(az keyvault secret show --vault-name "$KV_NAME" --name "db-password-${{ github.ref_name }}" --query value -o tsv)
            if [[ -n "$DB_PASS" ]]; then
              DB_PASSWORD="$DB_PASS"
              echo "db_password=$DB_PASSWORD" >> $GITHUB_ENV
              echo "::add-mask::$DB_PASSWORD"
              echo "Retrieved DB_PASSWORD from Key Vault: $KV_NAME (db-password-${{ github.ref_name }})"
            else
              echo "::error::DB password not found in Key Vault ($KV_NAME, db-password-${{ github.ref_name }})"
              exit 1
            fi
          fi
          
          # Construct connection string (password will be available for new or existing servers)
          if [[ -n "$DB_PASSWORD" ]]; then
            DB_CONNECTION_STRING="postgresql://${DB_USERNAME}:${DB_PASSWORD}@${DB_SERVER_NAME}.postgres.database.azure.com:5432/postgres?sslmode=require"
            echo "::add-mask::$DB_CONNECTION_STRING"
            echo "DATABASE_URL=$DB_CONNECTION_STRING" >> $GITHUB_ENV
          fi
          
          # Output server details for other steps
          echo "db_server=$DB_SERVER_NAME" >> $GITHUB_OUTPUT
          echo "db_username=$DB_USERNAME" >> $GITHUB_OUTPUT

      - name: Configure Database Firewall
        run: |
          # Allow Container Apps to access the database
          # Get Container Apps Environment outbound IPs
          ENV_IPS=$(az containerapp env show --name ${{ steps.display-info.outputs.azure_env_name }} --resource-group ${{ steps.display-info.outputs.resource_group }} --query "properties.staticIp" -o tsv)
          
          if [[ -n "$ENV_IPS" ]]; then
            echo "Adding Container Apps Environment IP to firewall: $ENV_IPS"
            az postgres flexible-server firewall-rule create \
              --name ${{ steps.postgres-setup.outputs.db_server }} \
              --resource-group ${{ steps.display-info.outputs.resource_group }} \
              --rule-name "ContainerAppsAccess" \
              --start-ip-address $ENV_IPS \
              --end-ip-address $ENV_IPS
          fi

          # Allow all Azure services (simpler for development)
          az postgres flexible-server firewall-rule create \
            --name ${{ steps.postgres-setup.outputs.db_server }} \
            --resource-group ${{ steps.display-info.outputs.resource_group }} \
            --rule-name "AllowAzureServices" \
            --start-ip-address "0.0.0.0" \
            --end-ip-address "0.0.0.0"

      - name: Seed PostgreSQL metadata table
        env:
          PGHOST: ${{ steps.postgres-setup.outputs.db_server }}.postgres.database.azure.com
          PGUSER: ${{ steps.postgres-setup.outputs.db_username }}
          PGDATABASE: postgres
          PGSSLMODE: require
          APPNAME: ${{ steps.load-app-name.outputs.app_name }}
        run: |
          # Authenticate with PostgreSQL using the credentials from the previous step
          if [[ -z "$PGHOST" || -z "$PGUSER" || -z "$PGDATABASE" ]]; then
            echo "::error::PostgreSQL connection details are not set"
            exit 1
          fi 
          if [[ -z "$APPNAME" ]]; then
            echo "::error::APPNAME is not set"
            exit 1
          fi  
          # Use previously output DB credentials from earlier steps
          if [[ -z "$PGHOST" || -z "$PGUSER" || -z "$PGDATABASE" ]]; then
            echo "::error::PostgreSQL connection details are not set"
            exit 1
          fi
            # Use the DB password from the environment variable set earlier
            if [[ -z "${{ steps.postgres-setup.outputs.db_username }}" || -z "${{ env.DATABASE_URL }}" ]]; then
            echo "::error::Database credentials not found from previous steps"
            exit 1
            fi
            export PGPASSWORD="${{ env.db_password }}"
            sudo apt-get update
            sudo apt-get install -y postgresql-client
            psql -h "$PGHOST" -U "$PGUSER" -d "$PGDATABASE" -c "CREATE TABLE IF NOT EXISTS metadata (id SERIAL PRIMARY KEY, appname TEXT NOT NULL UNIQUE);"
            psql -h "$PGHOST" -U "$PGUSER" -d "$PGDATABASE" -c "INSERT INTO metadata (appname) VALUES ('$APPNAME') ON CONFLICT DO NOTHING;"

      - name: Get ACR credentials
        id: get-acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show --name ${{ steps.display-info.outputs.acr_name }} --query username --output tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ steps.display-info.outputs.acr_name }} --query "passwords[0].value" --output tsv)
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
          echo "::add-mask::$ACR_PASSWORD"

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ steps.display-info.outputs.acr_name }}.azurecr.io
          username: ${{ steps.get-acr-creds.outputs.username }}
          password: ${{ steps.get-acr-creds.outputs.password }}

      - name: Deploy to Azure Container Apps
        run: |
          export AZURE_ENV_NAME=${{ steps.display-info.outputs.azure_env_name }}
          export DATABASE_URL="${{ env.DATABASE_URL }}"  # Add this line

          # Verify variables are set
          echo "AZURE_ENV_NAME: $AZURE_ENV_NAME"
          echo "DATABASE_URL is set: $([ -n "$DATABASE_URL" ] && echo 'Yes' || echo 'No')"
          
          # Deploy using docker-compose.yml
          az containerapp compose create \
            --resource-group ${{ steps.display-info.outputs.resource_group }} \
            --environment ${{ steps.display-info.outputs.azure_env_name }} \
            --compose-file-path docker-compose.yml \
            --registry-server ${{ steps.display-info.outputs.acr_name }}.azurecr.io \
            --registry-username ${{ steps.get-acr-creds.outputs.username }} \
            --registry-password "${{ steps.get-acr-creds.outputs.password }}"

          # Apply Azure Container Apps configurations from extension fields
          for SERVICE in $(yq '.services | keys | .[]' docker-compose.yml); do
            echo "--- Processing service: $SERVICE ---"
            
            # Check if service has Azure Container App configuration
            if yq -e ".services[\"$SERVICE\"][\"x-azure-containerapp\"]" docker-compose.yml &>/dev/null; then
              echo "Applying custom Azure configuration for $SERVICE"
              
              # Extract the Azure configuration to a temporary file
              yq ".services[\"$SERVICE\"][\"x-azure-containerapp\"]" docker-compose.yml > tmp-$SERVICE-config.yaml
              
              # Apply the configuration
              if ! az containerapp update --name $SERVICE --resource-group ${{ steps.display-info.outputs.resource_group }} --yaml tmp-$SERVICE-config.yaml; then
                echo "::error::Failed to update container app $SERVICE with custom configuration"
                exit 1
              fi
              
              echo "Successfully applied custom configuration for $SERVICE"
            else
              echo "No custom Azure configuration found for $SERVICE, using defaults from compose"
            fi
            
            echo "--- Finished processing service: $SERVICE ---"
            echo ""
          done
