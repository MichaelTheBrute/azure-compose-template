name: Azure Container Apps CI/CD

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Use GitHub Environments feature
    environment: ${{ github.ref_name }}
    
    # Define environment-specific variables
    env:
      # Common variables
      LOCATION: westus
      
      # Environment-specific variables based on branch name
      RESOURCE_GROUP: ${{ github.ref_name == 'main' && 'production-resource-group' || github.ref_name == 'staging' && 'staging-resource-group' || 'dev-resource-group' }}
      ACR_NAME: ${{ github.ref_name == 'main' && 'acrstudiologicioprod' || github.ref_name == 'staging' && 'acrstudiologiciostaging' || 'acrstudiologiciodev' }}
      ENVIRONMENT_NAME: ${{ github.ref_name == 'main' && 'production-env' || github.ref_name == 'staging' && 'staging-env' || 'dev-env' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      # Display deployment information
      - name: Display deployment info
        run: |
          echo "Deploying to environment: ${{ github.ref_name }}"
          echo "Resource Group: ${{ env.RESOURCE_GROUP }}"
          echo "ACR: ${{ env.ACR_NAME }}"
          echo "Container Apps Environment: ${{ env.ENVIRONMENT_NAME }}"
      
      # Setup infrastructure if it doesn't exist
      - name: Create Resource Group if not exists
        run: |
          if ! az group show --name ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "Creating resource group ${{ env.RESOURCE_GROUP }}..."
            az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
          else
            echo "Resource group ${{ env.RESOURCE_GROUP }} already exists."
          fi

      - name: Create ACR if not exists
        run: |
          if ! az acr show --name ${{ env.ACR_NAME }} &>/dev/null; then
            echo "Creating container registry ${{ env.ACR_NAME }}..."
            az acr create --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.ACR_NAME }} --sku Basic --admin-enabled true
          else
            echo "Container registry ${{ env.ACR_NAME }} already exists."
          fi

      - name: Create Container Apps Environment if not exists
        run: |
          if ! az containerapp env show --name ${{ env.ENVIRONMENT_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "Creating container apps environment ${{ env.ENVIRONMENT_NAME }}..."
            az containerapp env create \
              --name ${{ env.ENVIRONMENT_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }}
          else
            echo "Container apps environment ${{ env.ENVIRONMENT_NAME }} already exists."
          fi

      # Get ACR credentials programmatically instead of using secrets
      - name: Get ACR credentials
        id: get-acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show --name ${{ env.ACR_NAME }} --query username --output tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --query "passwords[0].value" --output tsv)
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
          echo "::add-mask::$ACR_PASSWORD"

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ steps.get-acr-creds.outputs.username }}
          password: ${{ steps.get-acr-creds.outputs.password }}
      
      # Build and push frontend
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/frontend:latest,${{ env.ACR_NAME }}.azurecr.io/frontend:${{ github.sha }}
      
      # Build and push backend
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/backend:latest,${{ env.ACR_NAME }}.azurecr.io/backend:${{ github.sha }}
      
      # Deploy to Azure Container Apps
      - name: Deploy to Azure Container Apps
        run: |
          # Deploy using docker-compose
          az containerapp compose create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.ENVIRONMENT_NAME }} \
            --compose-file-path docker-compose.yml \
            --registry-server ${{ env.ACR_NAME }}.azurecr.io \
            --registry-username ${{ steps.get-acr-creds.outputs.username }} \
            --registry-password "${{ env.ACR_PASSWORD }}"
          
          # Configure frontend
          az containerapp update --name frontend --resource-group ${{ env.RESOURCE_GROUP }} \
            --min-replicas 1 --max-replicas 10 \
            --image ${{ env.ACR_NAME }}.azurecr.io/frontend:${{ github.sha }} \
            --set-env-vars DEPLOY_TIMESTAMP=$(date +%s)
          
          # Configure backend
          az containerapp update --name backend --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/backend:${{ github.sha }} \
            --set-env-vars DEPLOY_TIMESTAMP=$(date +%s)
          
          # Configure backend ingress (if needed)
          az containerapp ingress update --name backend --resource-group ${{ env.RESOURCE_GROUP }} \
            --type internal --target-port 5000
          
          # Configure redis ingress (if needed)
          az containerapp ingress update --name redis --resource-group ${{ env.RESOURCE_GROUP }} \
            --type internal --target-port 6379 --transport tcp