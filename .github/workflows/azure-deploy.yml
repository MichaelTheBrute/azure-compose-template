name: Azure Container Apps CI/CD

on:
  push:
    branches: [ main, staging, prod ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Load App Name from docker-compose.yml
        id: load-app-name
        run: |
          APP_NAME=$(yq '.metadata.app_name' docker-compose.yml | tr '[:upper:]' '[:lower:]') # Convert to lowercase
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Validate App Name
        run: |
          APP_NAME="${{ steps.load-app-name.outputs.app_name }}"
          if [[ ! "$APP_NAME" =~ ^[a-z0-9]+$ ]]; then
            echo "Error: APP_NAME '$APP_NAME' must be lowercase and contain only alphanumeric characters."
            exit 1
          fi
          echo "APP_NAME '$APP_NAME' is valid."

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Display deployment info
        id: display-info
        run: |
          REF_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr -d '-') # Convert to lowercase and remove hyphens
          RESOURCE_GROUP="${{ steps.load-app-name.outputs.app_name }}-${REF_NAME}-rg"
          ACR_NAME="${{ steps.load-app-name.outputs.app_name }}${REF_NAME}acr"
          AZURE_ENV_NAME="${{ steps.load-app-name.outputs.app_name }}-${REF_NAME}-env"
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "azure_env_name=$AZURE_ENV_NAME" >> $GITHUB_OUTPUT

      - name: Check ACR Name Availability
        run: |
          ACR_NAME="${{ steps.display-info.outputs.acr_name }}"
          RESOURCE_GROUP="${{ steps.display-info.outputs.resource_group }}"
          echo "Checking if ACR '$ACR_NAME' exists in resource group '$RESOURCE_GROUP'..."
          
          # Check if the ACR exists in the resource group
          if az acr show --name $ACR_NAME --resource-group $RESOURCE_GROUP &>/dev/null; then
            echo "ACR '$ACR_NAME' already exists in resource group '$RESOURCE_GROUP'."
          else
            echo "ACR '$ACR_NAME' does not exist in resource group '$RESOURCE_GROUP'. Checking global availability..."
            
            # Check if the ACR name is globally available
            RESULT=$(az acr check-name --name $ACR_NAME --query "nameAvailable" --output tsv)
            if [[ "$RESULT" != "true" ]]; then
              echo "Error: ACR name '$ACR_NAME' is already in use globally and not owned by your subscription."
              exit 1
            fi
            echo "ACR name '$ACR_NAME' is globally available."
          fi

      - name: Create Resource Group if not exists
        run: |
          if ! az group show --name ${{ steps.display-info.outputs.resource_group }} &>/dev/null; then
            echo "Creating resource group ${{ steps.display-info.outputs.resource_group }}..."
            az group create --name ${{ steps.display-info.outputs.resource_group }} --location westus
          else
            echo "Resource group ${{ steps.display-info.outputs.resource_group }} already exists."
          fi

      - name: Create ACR if not exists
        run: |
          if ! az acr show --name ${{ steps.display-info.outputs.acr_name }} --resource-group ${{ steps.display-info.outputs.resource_group }} &>/dev/null; then
            echo "Creating container registry ${{ steps.display-info.outputs.acr_name }}..."
            az acr create --resource-group ${{ steps.display-info.outputs.resource_group }} --name ${{ steps.display-info.outputs.acr_name }} --sku Basic --admin-enabled true
          else
            echo "Container registry ${{ steps.display-info.outputs.acr_name }} already exists."
          fi

      - name: Create Container Apps Environment if not exists
        run: |
          if ! az containerapp env show --name ${{ steps.display-info.outputs.azure_env_name }} --resource-group ${{ steps.display-info.outputs.resource_group }} &>/dev/null; then
            echo "Creating container apps environment ${{ steps.display-info.outputs.azure_env_name }}..."
            az containerapp env create \
              --name ${{ steps.display-info.outputs.azure_env_name }} \
              --resource-group ${{ steps.display-info.outputs.resource_group }} \
              --location westus
          else
            echo "Container apps environment ${{ steps.display-info.outputs.azure_env_name }} already exists."
          fi

      - name: Create Azure Database for PostgreSQL
        id: postgres-setup
        run: |
          REF_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr -d '-')
          DB_SERVER_NAME="${{ steps.load-app-name.outputs.app_name }}-${REF_NAME}-db"
          DB_USERNAME="dbadmin"
          
          # Check if database server exists
          if ! az postgres flexible-server show --name $DB_SERVER_NAME --resource-group ${{ steps.display-info.outputs.resource_group }} &>/dev/null; then
            echo "Creating PostgreSQL flexible server: $DB_SERVER_NAME"
            
            # Generate secure password
            DB_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
            echo "::add-mask::$DB_PASSWORD"
            
            # Create the server with enhanced configuration
            az postgres flexible-server create \
              --name $DB_SERVER_NAME \
              --resource-group ${{ steps.display-info.outputs.resource_group }} \
              --location westus \
              --admin-user $DB_USERNAME \
              --admin-password "$DB_PASSWORD" \
              --sku-name Standard_B1ms \
              --tier Burstable \
              --storage-size 32 \
              --storage-auto-grow Enabled \
              --version 14 \
              --public-access 0.0.0.0 \
              --high-availability Disabled \
              --backup-retention 7 \
              --geo-redundant-backup Disabled
            
            # Store password for this session
            echo "db_password=$DB_PASSWORD" >> $GITHUB_ENV
            echo "::add-mask::$DB_PASSWORD"
            
            echo "PostgreSQL server $DB_SERVER_NAME created successfully"

            # Store DB_PASSWORD as a GitHub secret for future use
            echo "Storing DB_PASSWORD as POSTGRES_ADMIN_PASSWORD GitHub secret"
            GH_API="https://api.github.com"
            REPO="${GITHUB_REPOSITORY}"
            TOKEN="${{ secrets.GITHUB_TOKEN }}"
            PUBKEY=$(curl -s -H "Authorization: token $TOKEN" "$GH_API/repos/$REPO/actions/secrets/public-key")
            KEY_ID=$(echo "$PUBKEY" | jq -r '.key_id')
            KEY=$(echo "$PUBKEY" | jq -r '.key')
            ENCRYPTED=$(python3 -c "import base64,sys;from cryptography.hazmat.primitives.asymmetric import padding;from cryptography.hazmat.primitives import serialization;from cryptography.hazmat.primitives import hashes;from cryptography.hazmat.backends import default_backend;from cryptography.hazmat.primitives.serialization import load_pem_public_key;key=load_pem_public_key(bytes('-----BEGIN PUBLIC KEY-----\n'+sys.argv[1]+'\n-----END PUBLIC KEY-----\n','utf-8'),backend=default_backend());print(base64.b64encode(key.encrypt(bytes(sys.argv[2],'utf-8'),padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()),algorithm=hashes.SHA256(),label=None))).decode())" "$KEY" "$DB_PASSWORD")
            curl -s -X PUT -H "Authorization: token $TOKEN" -H "Content-Type: application/json" \
              -d "{\"encrypted_value\":\"$ENCRYPTED\",\"key_id\":\"$KEY_ID\"}" \
              "$GH_API/repos/$REPO/actions/secrets/POSTGRES_ADMIN_PASSWORD"
          else
            echo "PostgreSQL server $DB_SERVER_NAME already exists"
            # Retrieve password from GitHub Secret for existing server
            if [[ -n "${{ secrets.POSTGRES_ADMIN_PASSWORD }}" ]]; then
              DB_PASSWORD="${{ secrets.POSTGRES_ADMIN_PASSWORD }}"
              echo "db_password=$DB_PASSWORD" >> $GITHUB_ENV
              echo "::add-mask::$DB_PASSWORD"
              echo "Retrieved DB_PASSWORD from GitHub Secret."
            else
              echo "::error::POSTGRES_ADMIN_PASSWORD secret not set. Cannot seed database."
              exit 1
            fi
          fi
          
          # Construct connection string (password will be available for new or existing servers)
          if [[ -n "$DB_PASSWORD" ]]; then
            DB_CONNECTION_STRING="postgresql://${DB_USERNAME}:${DB_PASSWORD}@${DB_SERVER_NAME}.postgres.database.azure.com:5432/postgres?sslmode=require"
            echo "::add-mask::$DB_CONNECTION_STRING"
            echo "DATABASE_URL=$DB_CONNECTION_STRING" >> $GITHUB_ENV
          fi
          
          # Output server details for other steps
          echo "db_server=$DB_SERVER_NAME" >> $GITHUB_OUTPUT
          echo "db_username=$DB_USERNAME" >> $GITHUB_OUTPUT

      - name: Configure Database Firewall
        run: |
          # Allow Container Apps to access the database
          # Get Container Apps Environment outbound IPs
          ENV_IPS=$(az containerapp env show --name ${{ steps.display-info.outputs.azure_env_name }} --resource-group ${{ steps.display-info.outputs.resource_group }} --query "properties.staticIp" -o tsv)
          
          if [[ -n "$ENV_IPS" ]]; then
            echo "Adding Container Apps Environment IP to firewall: $ENV_IPS"
            az postgres flexible-server firewall-rule create \
              --name ${{ steps.postgres-setup.outputs.db_server }} \
              --resource-group ${{ steps.display-info.outputs.resource_group }} \
              --rule-name "ContainerAppsAccess" \
              --start-ip-address $ENV_IPS \
              --end-ip-address $ENV_IPS
          fi

          # Allow all Azure services (simpler for development)
          az postgres flexible-server firewall-rule create \
            --name ${{ steps.postgres-setup.outputs.db_server }} \
            --resource-group ${{ steps.display-info.outputs.resource_group }} \
            --rule-name "AllowAzureServices" \
            --start-ip-address "0.0.0.0" \
            --end-ip-address "0.0.0.0"

      - name: Seed PostgreSQL metadata table
        env:
          PGHOST: ${{ steps.postgres-setup.outputs.db_server }}.postgres.database.azure.com
          PGUSER: ${{ steps.postgres-setup.outputs.db_username }}
          PGPASSWORD: ${{ env.db_password }}
          PGDATABASE: postgres
          PGSSLMODE: require
          APPNAME: ${{ steps.load-app-name.outputs.app_name }}
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          psql -h "$PGHOST" -U "$PGUSER" -d "$PGDATABASE" -c "CREATE TABLE IF NOT EXISTS metadata (id SERIAL PRIMARY KEY, appname TEXT NOT NULL);"
          psql -h "$PGHOST" -U "$PGUSER" -d "$PGDATABASE" -c \"INSERT INTO metadata (appname) VALUES ('$APPNAME') ON CONFLICT DO NOTHING;\"

      - name: Get ACR credentials
        id: get-acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show --name ${{ steps.display-info.outputs.acr_name }} --query username --output tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ steps.display-info.outputs.acr_name }} --query "passwords[0].value" --output tsv)
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
          echo "::add-mask::$ACR_PASSWORD"

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ steps.display-info.outputs.acr_name }}.azurecr.io
          username: ${{ steps.get-acr-creds.outputs.username }}
          password: ${{ steps.get-acr-creds.outputs.password }}

      - name: Deploy to Azure Container Apps
        run: |
          export AZURE_ENV_NAME=${{ steps.display-info.outputs.azure_env_name }}
          export DATABASE_URL="${{ env.DATABASE_URL }}"  # Add this line
          
          # Deploy using docker-compose.yml
          az containerapp compose create \
            --resource-group ${{ steps.display-info.outputs.resource_group }} \
            --environment ${{ steps.display-info.outputs.azure_env_name }} \
            --compose-file-path docker-compose.yml \
            --registry-server ${{ steps.display-info.outputs.acr_name }}.azurecr.io \
            --registry-username ${{ steps.get-acr-creds.outputs.username }} \
            --registry-password "${{ steps.get-acr-creds.outputs.password }}"

          # Apply Azure Container Apps configurations from extension fields
          for SERVICE in $(yq '.services | keys | .[]' docker-compose.yml); do
            echo "--- Processing service: $SERVICE ---"
            
            # Check if service has Azure Container App configuration
            if yq -e ".services[\"$SERVICE\"][\"x-azure-containerapp\"]" docker-compose.yml &>/dev/null; then
              echo "Applying custom Azure configuration for $SERVICE"
              
              # Extract the Azure configuration to a temporary file
              yq ".services[\"$SERVICE\"][\"x-azure-containerapp\"]" docker-compose.yml > tmp-$SERVICE-config.yaml
              
              # Apply the configuration
              if ! az containerapp update --name $SERVICE --resource-group ${{ steps.display-info.outputs.resource_group }} --yaml tmp-$SERVICE-config.yaml; then
                echo "::error::Failed to update container app $SERVICE with custom configuration"
                exit 1
              fi
              
              echo "Successfully applied custom configuration for $SERVICE"
            else
              echo "No custom Azure configuration found for $SERVICE, using defaults from compose"
            fi
            
            echo "--- Finished processing service: $SERVICE ---"
            echo ""
          done
