name: Azure Container Apps CI/CD

on:
  push:
    branches: [ main, staging, prod ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Load App Name from docker-compose.yml
        id: load-app-name
        run: |
          APP_NAME=$(yq '.metadata.app_name' docker-compose.yml | tr '[:upper:]' '[:lower:]') # Convert to lowercase
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Validate App Name
        run: |
          APP_NAME="${{ steps.load-app-name.outputs.app_name }}"
          if [[ ! "$APP_NAME" =~ ^[a-z0-9]+$ ]]; then
            echo "Error: APP_NAME '$APP_NAME' must be lowercase and contain only alphanumeric characters."
            exit 1
          fi
          echo "APP_NAME '$APP_NAME' is valid."

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Display deployment info
        id: display-info
        run: |
          REF_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr -d '-') # Convert to lowercase and remove hyphens
          RESOURCE_GROUP="${{ steps.load-app-name.outputs.app_name }}-${REF_NAME}-rg"
          ACR_NAME="${{ steps.load-app-name.outputs.app_name }}${REF_NAME}acr"
          AZURE_ENV_NAME="${{ steps.load-app-name.outputs.app_name }}-${REF_NAME}-env"
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "azure_env_name=$AZURE_ENV_NAME" >> $GITHUB_OUTPUT

      - name: Check ACR Name Availability
        run: |
          ACR_NAME="${{ steps.display-info.outputs.acr_name }}"
          RESOURCE_GROUP="${{ steps.display-info.outputs.resource_group }}"
          echo "Checking if ACR '$ACR_NAME' exists in resource group '$RESOURCE_GROUP'..."
          
          # Check if the ACR exists in the resource group
          if az acr show --name $ACR_NAME --resource-group $RESOURCE_GROUP &>/dev/null; then
            echo "ACR '$ACR_NAME' already exists in resource group '$RESOURCE_GROUP'."
          else
            echo "ACR '$ACR_NAME' does not exist in resource group '$RESOURCE_GROUP'. Checking global availability..."
            
            # Check if the ACR name is globally available
            RESULT=$(az acr check-name --name $ACR_NAME --query "nameAvailable" --output tsv)
            if [[ "$RESULT" != "true" ]]; then
              echo "Error: ACR name '$ACR_NAME' is already in use globally and not owned by your subscription."
              exit 1
            fi
            echo "ACR name '$ACR_NAME' is globally available."
          fi

      - name: Create Resource Group if not exists
        run: |
          if ! az group show --name ${{ steps.display-info.outputs.resource_group }} &>/dev/null; then
            echo "Creating resource group ${{ steps.display-info.outputs.resource_group }}..."
            az group create --name ${{ steps.display-info.outputs.resource_group }} --location westus
          else
            echo "Resource group ${{ steps.display-info.outputs.resource_group }} already exists."
          fi

      - name: Create ACR if not exists
        run: |
          if ! az acr show --name ${{ steps.display-info.outputs.acr_name }} --resource-group ${{ steps.display-info.outputs.resource_group }} &>/dev/null; then
            echo "Creating container registry ${{ steps.display-info.outputs.acr_name }}..."
            az acr create --resource-group ${{ steps.display-info.outputs.resource_group }} --name ${{ steps.display-info.outputs.acr_name }} --sku Basic --admin-enabled true
          else
            echo "Container registry ${{ steps.display-info.outputs.acr_name }} already exists."
          fi

      - name: Create Container Apps Environment if not exists
        run: |
          if ! az containerapp env show --name ${{ steps.display-info.outputs.azure_env_name }} --resource-group ${{ steps.display-info.outputs.resource_group }} &>/dev/null; then
            echo "Creating container apps environment ${{ steps.display-info.outputs.azure_env_name }}..."
            az containerapp env create \
              --name ${{ steps.display-info.outputs.azure_env_name }} \
              --resource-group ${{ steps.display-info.outputs.resource_group }} \
              --location westus
          else
            echo "Container apps environment ${{ steps.display-info.outputs.azure_env_name }} already exists."
          fi

      - name: Get ACR credentials
        id: get-acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show --name ${{ steps.display-info.outputs.acr_name }} --query username --output tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ steps.display-info.outputs.acr_name }} --query "passwords[0].value" --output tsv)
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
          echo "::add-mask::$ACR_PASSWORD"

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ steps.display-info.outputs.acr_name }}.azurecr.io
          username: ${{ steps.get-acr-creds.outputs.username }}
          password: ${{ steps.get-acr-creds.outputs.password }}

      - name: Deploy to Azure Container Apps
        run: |
          export AZURE_ENV_NAME=${{ steps.display-info.outputs.azure_env_name }}

          # Deploy using docker-compose.yml
          az containerapp compose create \
            --resource-group ${{ steps.display-info.outputs.resource_group }} \
            --environment ${{ steps.display-info.outputs.azure_env_name }} \
            --compose-file-path docker-compose.yml \
            --registry-server ${{ steps.display-info.outputs.acr_name }}.azurecr.io \
            --registry-username ${{ steps.get-acr-creds.outputs.username }} \
            --registry-password "${{ steps.get-acr-creds.outputs.password }}"

          # Loop through services in docker-compose.yml and configure replicas and ingress
          for SERVICE in $(yq '.services | keys | .[]' docker-compose.yml); do
            echo "--- Processing service: $SERVICE ---"
            
            # Extract custom labels using yq, fallback to defaults if not set
            MIN_REPLICAS=$(yq -r ".services[\"$SERVICE\"].labels[]? | select(test(\"^studiologic.io.min-replicas=\")) | split(\"=\")[1]" docker-compose.yml | head -n1)
            INGRESS_TYPE=$(yq -r ".services[\"$SERVICE\"].labels[]? | select(test(\"^studiologic.io.ingress.type=\")) | split(\"=\")[1]" docker-compose.yml | head -n1)
            INGRESS_TRANSPORT=$(yq -r ".services[\"$SERVICE\"].labels[]? | select(test(\"^studiologic.io.ingress.transport=\")) | split(\"=\")[1]" docker-compose.yml | head -n1)

            # Debug: Show what was extracted
            echo "Extracted labels for $SERVICE:"
            echo "  MIN_REPLICAS: '$MIN_REPLICAS'"
            echo "  INGRESS_TYPE: '$INGRESS_TYPE'"
            echo "  INGRESS_TRANSPORT: '$INGRESS_TRANSPORT'"

            # Set defaults for empty/null values
            if [[ -z "$MIN_REPLICAS" || "$MIN_REPLICAS" == "null" ]]; then
              MIN_REPLICAS=0
            fi
            if [[ -z "$INGRESS_TYPE" || "$INGRESS_TYPE" == "null" ]]; then
              INGRESS_TYPE="external"
            fi
            if [[ -z "$INGRESS_TRANSPORT" || "$INGRESS_TRANSPORT" == "null" ]]; then
              INGRESS_TRANSPORT="http"
            fi

            echo "Final values for $SERVICE:"
            echo "  MIN_REPLICAS: $MIN_REPLICAS"
            echo "  INGRESS_TYPE: $INGRESS_TYPE"
            echo "  INGRESS_TRANSPORT: $INGRESS_TRANSPORT"

            # Get current YAML config for the container app
            echo "Fetching current configuration for $SERVICE"
            if ! az containerapp show --name $SERVICE --resource-group ${{ steps.display-info.outputs.resource_group }} -o yaml > tmp-$SERVICE-full.yaml; then
              echo "::error::Failed to get configuration for $SERVICE"
              exit 1
            fi

            # Extract only the properties section which is what we need for updates
            echo "Extracting properties section for update"
            yq '.properties' tmp-$SERVICE-full.yaml > tmp-$SERVICE.yaml

            # Patch YAML with new values
            echo "Applying label configurations to YAML for $SERVICE"
            yq -i ".configuration.ingress.type = \"$INGRESS_TYPE\"" tmp-$SERVICE.yaml
            yq -i ".configuration.ingress.transport = \"$INGRESS_TRANSPORT\"" tmp-$SERVICE.yaml
            yq -i ".template.scale.minReplicas = $MIN_REPLICAS" tmp-$SERVICE.yaml

            # Apply the updated YAML configuration to the container app
            echo "Applying updated configuration to $SERVICE"
            if ! az containerapp update --name $SERVICE --resource-group ${{ steps.display-info.outputs.resource_group }} --yaml tmp-$SERVICE.yaml; then
              echo "::error::Failed to update container app $SERVICE"
              exit 1
            fi
            
            echo "--- Finished processing service: $SERVICE ---"
            echo ""
          done

      - name: Check if Resource Group is being deleted
        id: check-rg-state
        run: |
          RESOURCE_GROUP="${{ steps.display-info.outputs.resource_group }}"
          MAX_WAIT_MINUTES=30
          WAIT_INTERVAL_SECONDS=300  # 5 minutes
          TOTAL_WAIT_SECONDS=$((MAX_WAIT_MINUTES * 60))
          ELAPSED_SECONDS=0
          
          echo "Checking state of resource group: $RESOURCE_GROUP"
          
          while [ $ELAPSED_SECONDS -lt $TOTAL_WAIT_SECONDS ]; do
            # Check if resource group exists
            if ! az group exists --name "$RESOURCE_GROUP" &>/dev/null; then
              echo "Resource group does not exist. Ready to create."
              echo "rg_ready=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Check provisioning state
            PROVISIONING_STATE=$(az group show --name "$RESOURCE_GROUP" --query "properties.provisioningState" -o tsv)
            echo "Current provisioning state: $PROVISIONING_STATE"
            
            if [ "$PROVISIONING_STATE" == "Deleting" ]; then
              echo "Resource group is being deleted. Waiting for $WAIT_INTERVAL_SECONDS seconds before checking again..."
              sleep $WAIT_INTERVAL_SECONDS
              ELAPSED_SECONDS=$((ELAPSED_SECONDS + WAIT_INTERVAL_SECONDS))
            elif [ "$PROVISIONING_STATE" == "Succeeded" ]; then
              echo "Resource group is in Succeeded state. Ready to proceed."
              echo "rg_ready=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "Resource group is in $PROVISIONING_STATE state. Waiting for $WAIT_INTERVAL_SECONDS seconds before checking again..."
              sleep $WAIT_INTERVAL_SECONDS
              ELAPSED_SECONDS=$((ELAPSED_SECONDS + WAIT_INTERVAL_SECONDS))
            fi
          done
          
          echo "::error::Timed out waiting for resource group to be ready after $MAX_WAIT_MINUTES minutes."
          echo "rg_ready=false" >> $GITHUB_OUTPUT
          exit 1

